{"name": "test02_mis_search_article", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <scripts.test02_mis.TestMis object at 0x00000252244E7940>, title = 'test_art', html = '7'\n\n    def test02_mis_search_article(self, title=\"test_art\", html=\"7\"):\n        r = self.mis.mis_search_article(title, html)\n        try:\n>           Tools.common_assert(r, statues_code=200)\n\nscripts\\test02_mis.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntools\\tool.py:20: in common_assert\n    assert \"OK\" == response.json().get(\"message\")\nvenv\\lib\\site-packages\\requests\\models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\nC:\\Users\\fxx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Users\\fxx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x00000252220B8730>\ns = '<!DOCTYPE html>\\n<html>\\n<head>\\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\\n<title>æ¬¢è¿\\...¼\\x93å\\xad\\x98</p>\\n</dl>\\n\\n<p><em>--- ä¿¡æ\\x81¯ä¸\\xadå¿\\x83ç³»ç»\\x9fè¿\\x90ç»´é\\x83¨ ---</em></p>\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Users\\fxx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\decoder.py:355: JSONDecodeError"}, "attachments": [{"name": "log", "source": "fa22c052-acee-4056-a42f-c72a83a669fe-attachment.txt", "type": "text/plain"}], "start": 1617423480097, "stop": 1617423480175, "uuid": "2d482eb8-f198-4b03-a403-0ba08208a64e", "historyId": "c909436f61eecdb57333892b88764807", "testCaseId": "5f59d7069a08ea20443a242a413d962c", "fullName": "scripts.test02_mis.TestMis#test02_mis_search_article", "labels": [{"name": "parentSuite", "value": "scripts"}, {"name": "suite", "value": "test02_mis"}, {"name": "subSuite", "value": "TestMis"}, {"name": "host", "value": "fanxx"}, {"name": "thread", "value": "14580-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scripts.test02_mis"}]}